//Crie um arquivo que contém uma classe, que em seu construtor possua todos campos dela preenchidos.
//Converta essa classe para um JSON, armazenado em uma string e printe-o
#region  1 - Serialização de classes em JSON 
#endregion

//Converta a string de JSON anterior a classe que foi criada anteriormente
#region  2 - Deserialização de JSON em classes
#endregion

//Entenda o conceito de DTO, crie um DTO referente a classe anteriormente criada.
//Caso 
//utilize um Mapper(AutoMapper) para passar os valores da classe para o dto.
//Nesse DTO ao menos uma das propriedades deve possuir um nome diferente e um tipo diferente, que utilizando o mapper ,será mapeado e convertido para o tipo correto.
#region  3 - DTO e Mapper
#endregion
//Faça uma chamada REST utilizando o HttpClient, crie uma classe para o Objeto de retorno da API, serialize o Json recebido na classe. Printe o resultado 
#region  4 - Chamada REST - HttpClient
#endregion

//Faça uma chamada REST utilizando o RestClient, crie uma classe para o Objeto de retorno da API, serialize o Json recebido na classe. Printe o resultado 
#region  5 - Chamada REST - RestClient
#endregion

//Declare uma propriedade de tipo DateTime, utilizando o momento atual como valor de inicialização,
//converta ela para uma nova string e printe ela nesse formato:  DIA@ANO@MES#HORA#MINUTOS (Números com os separadoes @ e #)
#region 6 - Conversão de Data
#endregion

//Declare uma nova propriedade de tipo DateTime, utilizando o momento atual + 45 dias como valor de inicialização, calcule a diferença em segundos entre ambos
#region 7 - Calculos Data
#endregion

//Usando essa mesma solução, crie uma nova biblioteca de classes, verifique o arquivo .csproj da biblioteca de classes que foi gerado após a criação.
//dentro dessa biblioteca de classes importe(using) alguma das classes anteriormente criadas e a utilize.
//verifique novamente o arquivo .csproj, Printe oque aconteceu
#region 8 - Biblioteca de classes
#endregion

